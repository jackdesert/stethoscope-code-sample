RATIONALE
=========

Q: What does Stethoscope do?
A: It receives badge rssi data through its /rssi_readings API,
   and eventually it will predict where a badge is located.

Q: Why is this written in Python, when much of our other software is in Ruby?
A: Python is a strong choice for data analysis, and has solid libraries
   for deep learning, which Jack hopes to use in determining location.
   Also, Jack has had renewed interest in learning Python really well.

Q: Why was the database originally sqlite?
A: It's fast enough, it's the simplest SQL system to set up, and it is also
   convenient for copying datasets.

   Regarding speed of sqlite,  in July 2018 Jack conducted load tests against
   stethoscope, and assuming 5% uniqueness, stethoscope can handle 400 requests
   per second (of which only 20/second are database writes because of 5%
   uniqueness assumption) which represents 4 pis per house, 20 badges per
   house, and five total houses.  The load test was conducted with sqlite in
   place, and the database was not the bottleneck. The bottleneck was that the
   server ran out of file descriptors.

   Note that in July 2018 the /badges/:id/location endpoint had not been
   completed. Also there was not much data in the databse.

Q: Why did the database change to postgres in November 2018?
A: After collecting data for about a month, there were 500_000
   rssi readings in the database. Stethoscope was taking a long time to process
   requests.  POSTing a new rssi reading was taking about five seconds, and
   predicting location sometimes would time out at 27 seconds saying that
   SQLAlchemy could not obtain a database connection.

   So Jack upgraded the database to stethoscope, and time to write an rssi
   reading dropped down to a couple of milliseconds, and time to predict location
   dropped to 0.6 seconds. 


Q: Why do the APIs use underscore_keys instead of camelKeys?
A: The API is built in python, which uses underscore keys.
   While one of the main users of the API is a Node application (camelKeys),
   the other main user of the API is a Ruby application(underscore_keys).
   So to make it easiest on the most number of users, it has been kept
   in underscore, even though JSON is commonly done in camel.

Q: Why are you using theano as a backend?
A: To get around this error that we get sometimes when we load a keras
   model from disk: "TypeError: Cannot interpret feed_dict key as Tensor"

Q: Why is tensorflow being used instead of theano?
A: Originally because it is the keras default.
   Later theano was used briefly to get around this error:
   "*** ValueError: Tensor is not an element of this graph."
   But server startup takes twice as long with theano (9 seconds)
   compared to tensorflow (4 seconds).
   Also theano worked on my development machine (Kali) but did not
   work out of the box on ubuntu 16.04 in production.
   So once we solved teh error using this site:
   https://github.com/keras-team/keras/issues/6462#issuecomment-319232504
   then we went back to tensorflow.

Q: Why are rooms given a default bayes weight if that room is not included in the payload?
A: Because that makes it easier to support large campuses, where there are
   large numbers of rooms in other houses where the resident is unlikely to be.
   By using a default bayes weight for any unlisted houses, the payloads
   become smaller because you still get approximately the answer you
   are looking for without having to pass in a bayes weight for every room on campus.

